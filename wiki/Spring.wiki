#labels Featured
as of 2.0-beta-6 or later, GuiceyFruit supports the use of Spring injection annotations (e.g. *@Autowired*) along with Spring lifecycle interfaces (*InitializingBean*, *DisposableBean*). 

If you have some existing code which is using a combination of JSR250 and Spring annontations you can let GuiceyFruit inject your beans using the Guice module mechanism.

For example a bean with the following combination of @Autowired and @Resource would be injected by GuiceyFruit...

{{{
public class MyBean {
  @Autowired
  SomeDto someDto;

  @Resource
  DataSource customerDataSource;
}}}

You just need to ensure you add the SpringModule into your Guice injector. For example

{{{
Injector injector = Guice.createInjector(new SpringModule(), new Jsr250Module(), 
  new AbsractModule() {
    public void configure() {
       ... 
    }
  });
}}}

This also supports the [Lifecycle] support from JSR 250 as well as invoking the Spring InitializingBean or DisposableBean interfaces

== Dependencies ==

If you use [Maven] you just need to add a dependency on *guiceyfruit-spring* (see more details on the [Maven] page)

So add the following to your repositories section
{{{
  <repositories>
    <repository>
      <id>guiceyfruit.release</id>
      <name>GuiceyFruit Release Repository</name>
      <url>http://guiceyfruit.googlecode.com/svn/repo/releases/</url>
      <snapshots>
        <enabled>false</enabled>
      </snapshots>
      <releases>
        <enabled>true</enabled>
      </releases>
    </repository>
  </repositories>
}}}

Then add a dependency on guiceyfruit-spring

{{{
    <dependency>
      <groupId>org.guiceyfruit</groupId>
      <artifactId>guiceyfruit-spring</artifactId>
      <version>2.0-beta-6</version>
    </dependency>
}}}